swagger: '2.0'
######################################################
# Prolog
######################################################
info:
  version: "1.0"
  title: "WSO2 Identity Server Rest API - Authentication"
  description: |
    This document specifies a **RESTful API** for WSO2 **Identity Server** .

    It is written with [swagger 2](http://swagger.io/).

  contact:
    name: "WSO2"
    url: "http://wso2.com/products/identity-server/"
    email: "architecture@wso2.com"
  license: 
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# The fixed parts of the URLs of the API
######################################################

# The schemes supported by the API
schemes: 
  - https

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
host: apis.is.com

# The base path of the API.
# Will be prefixed to all paths.

# if the tenant domain is carbon.super basepath can be /api/identity/auth/v0.1 like this too.
basePath: /t/{tenant-domain}/api/identity/auth/v1.0

# The following media types can be passed as input in message bodies of the API.
# The actual media type must be specified in the Content-Type header field of the request.
# The default is json, i.e. the Content-Type header is not needed to
# be set, but supporting it serves extensibility.
consumes: 
  - application/json

# The following media types may be passed as output in message bodies of the API.
# The media type(s) consumable by the requestor is specified in the Accept header field
# of the corresponding request. 
# The actual media type returned will be specfied in the Content-Type header field 
# of the of the response.
# The default of the Accept header is json, i.e. there is not needed to
# set the value, but supporting it serves extensibility.
produces: 
  - application/json
    
paths:
  /authenticate:
    post:
      description: |
         This API is used to authenticate the user and to get a JWT that can be used to identify the user authenticated
      x-wso2-request: |
        curl -k -v -X POST -H "Authorization: Basic YWRtaW46YWRtaW4=" -H "Content-Type: application/json"  "https://localhost:9443/api/identity/auth/v1.0/authenticate"
        
        curl -k -v -X POST -H "Content-Type: application/json" -d '{ "username": "admin","password": "admin"}' "https://localhost:9443/api/identity/auth/v1.0/authenticate"
            
      x-wso2-response: |
        {"token": "eyJ4NXQiOiJObUptT0dVeE16WmxZak0yWkRSaE5UWmxZVEExWXpkaFpUUmlPV0UwTldJMk0ySm1PVGMxWkEiLCJraWQiOiJObUptT0dVeE16WmxZak0yWkRSaE5UWmxZVEExWXpkaFpUUmlPV0UwTldJMk0ySm1PVGMxWkEiLCJhbGciOiJSUzI1NiJ9.eyJhdF9oYXNoIjoiX01yYUVvZjlzdXN3aHNabC1sOXkxQSIsImFjciI6InVybjptYWNlOmluY29tbW9uOmlhcDpzaWx2ZXIiLCJzdWIiOiJhZG1pbiIsImF1ZCI6WyJmOVpRR182UFdSbTRidUZIcWkzWGw4SkZpZGNhIl0sImF6cCI6ImY5WlFHXzZQV1JtNGJ1RkhxaTNYbDhKRmlkY2EiLCJpc3MiOiJodHRwczpcL1wvbG9jYWxob3N0Ojk0NDNcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE1Mjg4ODg2NDksImlhdCI6MTUyODg4NTA0OX0.EhOa4TDMroWrZfKFXq0wJU4bLSq79GvTXsZVpb3hJkEFL7OSx0YKZ6A9FhAi4TUcRRpFyti74kNGcU2DcRg_UZVQ9drq4L_YfdPBvqDUfwt8Au0Q3lRVVE-nvNzbJVa3IukxD6KSBMqynua6RtLRv5n3P6MuHy8uWDJR4KxMlDc"}
        
      summary: |
        Authenticate User 
      
      # post parameters:
      parameters:
        -
          in: header
          name: Authorization
          description:  Authorization header that contains the 'Basic' word followed by a space and a base64-encoded username:password string. Required unless username, password not passed in request body.
          required: false
          type: string
          
        -
          name: credentials
          in: body
          description:  Username and password in request body. Required unless username, password not passed with 'Authorization' header. 
          required: false
          schema:
            $ref: '#/definitions/AuthenticationRequest'
       
      responses:
        202:
          description: Authentication accepted
          schema:
            $ref: '#/definitions/AuthenticationSuccessResponse'
        400:
          description: Bad Request
          schema:
             $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
             $ref: '#/definitions/Error'
        404:
          description: Not Found
          schema:
             $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
             $ref: '#/definitions/Error'
      tags:
        - Authenticate  

definitions:
#-----------------------------------------------------    
# Authentication request  object
#-----------------------------------------------------      
  AuthenticationRequest:
    type: object
    properties:
      username:
        type: string
      password:
       type: string
      sessionDataKey:
       type: string
       
#-----------------------------------------------------    
# Authentication success response  object
#-----------------------------------------------------      
  AuthenticationSuccessResponse:
    type: object
    properties:
      token:
        type: string

#-----------------------------------------------------
# Error response  object
#-----------------------------------------------------      
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
      description:
        type: string
      redirectURL:
        type: string

